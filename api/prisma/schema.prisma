// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  displayname  String   @unique
  password     String
  role         Role     @default(USER)
  tags         Tag[]
  people       Person[]
  ratings      VideoRatings[]  // user ratings on videos

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model IncomingFile {
  id        Int      @id @default(autoincrement())
  filename  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CovertVideo {
  id          Int      @id @default(autoincrement())
  videoFileId Int @unique
  videoFile   VideoFile @relation(fields: [videoFileId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VideoFile {
  id            Int      @id @default(autoincrement())
  filename      String
  filepath      String
  size          BigInt
  duration      Int
  height        Int
  width         Int
  videoCodec    String
  audioCodec    String
  views         Int      @default(0)
  
  tags          Tag[]
  people        Person[]
  convertId     Int? @unique
  convertVideo  CovertVideo?
  ratings       VideoRatings[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([filename, size])
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  videoFiles VideoFile[]
  userId     Int
  creator    User        @relation(fields: [userId], references: [id])

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Person {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  videoFiles VideoFile[]
  userId     Int
  creator    User        @relation(fields: [userId], references: [id])

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model VideoRatings {
  video    VideoFile @relation(fields: [videoId], references: [id])
  videoId  Int
  user     User @relation(fields: [userId], references: [id])
  userId   Int

  rating   Int 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([videoId, userId])
}