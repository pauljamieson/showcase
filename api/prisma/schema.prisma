// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String  @unique
  username String?  @unique
  password String 
  role Role @default(USER)
  tags Tag[]
  people Person[]
}

enum Role {
  ADMIN
  USER
}

model IncomingFile {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filename String 
}

model VideoFile {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filename String
  size BigInt
  duration Int
  height Int
  width Int
  videoCodec String
  audioCodec String
  views Int @default(0)
  rating Int @default(0)
  tags TagOnVideFile[]
  people PersonOnVideFile[]

  @@unique([filename, size])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique
  videoFiles TagOnVideFile[]
  userId User @relation(fields: [creator], references: [id], onDelete: Restrict)
  creator Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagOnVideFile {
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int 
  videoFile VideoFile @relation(fields: [videoFileId], references: [id])
  videoFileId Int
  
  @@id([tagId, videoFileId])
}

model Person {
  id Int @id @default(autoincrement())
  name String @unique
  videoFiles PersonOnVideFile[]
  userId User @relation(fields: [creator], references: [id], onDelete: Restrict)
  creator Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonOnVideFile {
  person Person @relation(fields: [personId], references: [id])
  personId Int 
  videoFile VideoFile @relation(fields: [videoFileId], references: [id])
  videoFileId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@id([personId, videoFileId])
}
